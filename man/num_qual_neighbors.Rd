% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/num_qual_neighbors.R
\name{num_qual_neighbors}
\alias{num_qual_neighbors}
\title{Test if neighborhood passes a logical filter}
\usage{
num_qual_neighbors(neighborhood, lgl_filter, ignore_nodes = c(), ...)
}
\arguments{
\item{neighborhood}{passed by the \code{tidygraph::map_local_lgl()} function.}

\item{lgl_filter}{an expression to apply to the node attributes of
\code{neighborhood}; must be encapsulated in \code{expr( ... )}}

\item{ignore_nodes}{nodes to exclude from the filter (use the \code{"name"}
attribute of the nodes)}

\item{...}{just takes any other arguments passed automatically by
\code{tidygraph::map_local_lgl()}}
}
\value{
an integer of the number of nodes that qualify for each neighborhood
}
\description{
Using the 'tidygraph' functions \code{map_local_*()}, it is easy to scan the
neighborhood of all the nodes in a graph. This function takes a logical
filter expression to apply on the node attributes of a graph, and returns the
number of neighbors that qualify.
}
\examples{
suppressPackageStartupMessages(library(tidygraph))
set.seed(0)
gr <- quick_barabasi(30)
gr

plot(gr)

# number of neighbors with a "B" in their name
B_gr <- gr \%>\%
    mutate(name_with_B = map_local_int(
        .f = num_qual_neighbors,
        lgl_filter = rlang::expr(stringr::str_detect(name, "B"))
    ))
B_gr \%N>\%
    filter(name_with_B > 0) \%>\%
    plot()

}
